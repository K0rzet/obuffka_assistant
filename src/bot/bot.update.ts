import { Update, Start, Ctx, On, Action } from 'nestjs-telegraf';
import { Context } from './interfaces/context.interface';
import { Markup } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { Injectable } from '@nestjs/common';
import { Message } from 'telegraf/typings/core/types/typegram';
import { AdminMessage } from './interfaces/admin.interface';

@Injectable()
@Update()
export class BotUpdate {
  private activeChats: Record<number, AdminMessage> = {};

  constructor(private configService: ConfigService) {}

  @Start()
  async startCommand(@Ctx() ctx: Context) {
    const adminId = this.configService.get<string>('telegram.adminId');
    const isAdmin = ctx.from.id.toString() === adminId;

    if (isAdmin) {
      await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', 
        Markup.keyboard([
          ['üìã –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã']
        ])
        .resize()
      );
      return;
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
      Markup.keyboard([
        ['‚ùì –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?', 'üìû –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']
      ])
      .resize()
    );
    return;
  }

  @On('text')
  async handleMessage(@Ctx() ctx: Context) {
    const adminId = this.configService.get<string>('telegram.adminId');
    const message = ctx.message as Message.TextMessage;
    const text = message?.text || '';
    const isAdmin = ctx.from.id.toString() === adminId;

    if (isAdmin) {
      if (ctx.session.replyToUser) {
        const userId = ctx.session.replyToUser;
        await ctx.telegram.sendMessage(userId, text);
        await ctx.reply('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        delete ctx.session.replyToUser;
        return;
      }

      if (text === 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã') {
        return this.showActiveChats(ctx);
      }
      return this.handleAdminMessage(ctx);
    }

    if (text === '‚ùì –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?') {
      await ctx.reply(`–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞:

1. –î–æ—Å—Ç–∞–≤–∫–∞ –Ø–Ω–¥–µ–∫—Å
   - –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
   - –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è
   - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

2. –°–î–≠–ö
   - –ê–¥—Ä–µ—Å –ü–í–ó –∏–ª–∏ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
   - –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è
   - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

3. –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏
   - –ü–æ–ª–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å –∏–Ω–¥–µ–∫—Å–æ–º
   - –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è
   - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üõç –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏`);
      return;
    }

    if (text === 'üìû –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å') {
      return this.handleStartChat(ctx, 'order');
    }

    if (ctx.session.isWaitingForAdmin) {
      return this.forwardToAdmin(ctx);
    }
  }

  private async showActiveChats(ctx: Context) {
    const chats = Object.values(this.activeChats);
    
    if (chats.length === 0) {
      await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤', 
        Markup.keyboard([
          ['üìã –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã']
        ])
        .resize()
      );
      return;
    }

    try {
      for (const chat of chats) {
        const messageText = `
–¢–∏–ø: ${chat.type === 'question' ? '‚ùì –í–æ–ø—Ä–æ—Å' : 'üõç –ó–∞–∫–∞–∑'}
–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${chat.userId}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${chat.text}
`;
        await ctx.reply(messageText, {
          ...Markup.inlineKeyboard([
            [
              Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_${chat.userId}`),
              Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç', `close_${chat.userId}`)
            ]
          ])
        });
      }
    } catch (error) {
      console.error('Error showing chats:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–∞—Ç–æ–≤');
    }
  }

  private async handleStartChat(ctx: Context, type: 'question' | 'order') {
    ctx.session.type = type;
    ctx.session.isWaitingForAdmin = true;
    const message = type === 'question' ? 
      '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å' : 
      '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å';
    await ctx.reply(message);
  }

  private async forwardToAdmin(ctx: Context) {
    const adminId = this.configService.get<string>('telegram.adminId');
    const userId = ctx.from.id;
    const message = ctx.message as Message.TextMessage;
    
    const messageText = `
–ù–æ–≤–æ–µ ${ctx.session.type === 'question' ? '–æ–±—Ä–∞—â–µ–Ω–∏–µ' : '–∑–∞–∫–∞–∑'}
–û—Ç: ${ctx.from.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
ID: ${userId}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${message.text}
    `;
    
    this.activeChats[userId] = {
      userId,
      messageId: message.message_id,
      text: message.text,
      type: ctx.session.type
    };

    await ctx.telegram.sendMessage(adminId, messageText);
    await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }

  @Action(/reply_(\d+)/)
  async handleReplyButton(@Ctx() ctx: Context) {
    const callbackQuery = ctx.callbackQuery as { data: string };
    const match = callbackQuery.data.match(/reply_(\d+)/);
    if (!match) return;

    const userId = match[1];
    const chat = this.activeChats[userId];
    if (!chat) {
      return ctx.reply('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    ctx.session.replyToUser = userId;
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –í—Å–µ, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`);
  }

  @Action(/close_(\d+)/)
  async handleCloseChat(@Ctx() ctx: Context) {
    const callbackQuery = ctx.callbackQuery as { data: string };
    const match = callbackQuery.data.match(/close_(\d+)/);
    if (!match) return;

    const userId = match[1];
    if (this.activeChats[userId]) {
      delete this.activeChats[userId];
      await ctx.reply(`–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} –∑–∞–∫—Ä—ã—Ç`);
      await ctx.telegram.sendMessage(userId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–ª —á–∞—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.');
    }
  }

  private async handleAdminMessage(ctx: Context) {
    const message = ctx.message as Message.TextMessage;
    if (!message?.reply_to_message) {
      return;
    }

    const replyMsg = message.reply_to_message as Message.TextMessage;
    const match = replyMsg.text?.match(/ID: (\d+)/);
    if (!match) return;

    const userId = parseInt(match[1]);
    await ctx.telegram.sendMessage(userId, message.text);
    await ctx.reply('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
  }
} 